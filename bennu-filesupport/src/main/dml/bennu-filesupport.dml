/*
 * bennu-filesupport.dml
 *
 * Copyright (c) 2013, Instituto Superior TÃ©cnico. All rights reserved.
 *
 * This file is part of {artifactId}.
 *
 * {artifactId} is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * {artifactId} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with {artifactId}.  If not, see <http://www.gnu.org/licenses/>.
 */
package pt.ist.bennu.filesupport.domain;

class FileSupport;

relation BennuFileSupport {
	FileSupport playsRole fileSupport {
		multiplicity 0..1;
	}
	.pt.ist.bennu.core.domain.Bennu playsRole bennu {
		multiplicity 1..1;
	}
}

class GenericFile {
	Long size;
	DateTime creationDate;
	String filename;
	String displayName;
	String contentType;
	String contentKey;
}

class FileRawData {
	String contentKey;
	bytearray content;
}

class LocalFileToDelete {
	String filePath;
}

class FileStorage {
	String name;
}
	class DomainStorage extends FileStorage{
	}
	class DBStorage extends FileStorage{
		String host;
		Integer port;
		String dbName;
		String tableName;
		String username;
		String password;
	}
	class LocalFileSystemStorage extends FileStorage{
		String path;
		Integer treeDirectoriesNameLength;
	}	

class FileStorageConfiguration {
	String fileType;
}

relation FileStorageFile {
	GenericFile playsRole files {
		multiplicity *;
	}	
	FileStorage playsRole storage;
}

relation FileStorageConfigurationFileStorage {
	FileStorageConfiguration playsRole configurations{
		multiplicity *;
	} 
	FileStorage playsRole storage; 
} 

relation FilePluginRootGenericFile {
	FileSupport playsRole fileSupport;
	GenericFile playsRole genericFiles {
		multiplicity *;
	}
}

relation FilePluginRootFileRawDatat {
	FileSupport playsRole fileSupport;
	FileRawData playsRole fileRawDatas {
		multiplicity *;
	}
}

relation FilePluginRootFileStorage {
	FileSupport playsRole fileSupport;
	FileStorage playsRole fileStorages {
		multiplicity *;
	}
}

relation FilePluginRootStorageConfiguration {
	FileSupport playsRole fileSupport;
	FileStorageConfiguration playsRole fileStorageConfigurations {
		multiplicity *;
	}
}

relation FilePluginRootLocalFileToDelete {
	FileSupport playsRole fileSupport;
	LocalFileToDelete playsRole localFilesToDelete {
		multiplicity *;
	}
}