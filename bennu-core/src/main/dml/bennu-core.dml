package pt.ist.bennu.core.domain;

/*
 * @(#)bennu-core.dml
 *
 * Copyright 2009 Instituto Superior Tecnico
 * Founding Authors: Jo√£o Figueiredo, Luis Cruz, Paulo Abrantes, Susana Fernandes
 * 
 *      https://fenix-ashes.ist.utl.pt/
 * 
 *   This file is part of the Bennu web application infrastructure.
 *
 *   Bennu is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published
 *   by the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.*
 *
 *   Bennu is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with Bennu. If not, see <http://www.gnu.org/licenses/>.
 * 
 */

valueType pt.ist.bennu.core.util.MultiLanguageString as MultiLanguageString {
    externalizeWith {
        String exportAsString();
    }

    internalizeWith importFromString();
}

valueType java.lang.Class as Class {
	externalizeWith {
		String getName();
	}
	internalizeWith pt.ist.bennu.core.util.ClassInternalizer.internalize();
}

class Bennu {
}

class User {
	String username  (REQUIRED);
	String password;
	DateTime created;
	DateTime lastLogoutDateTime;
	DateTime expiration;
	String email;
}

relation SystemUsers {
	Bennu playsRole bennu {
		multiplicity 1..1;
	}
	User playsRole users {
		multiplicity *;
	}
}

/* Virtual Hosting */
class VirtualHost {
	String hostname;
	String supportedLanguages;
}

relation SystemHosts {
	Bennu playsRole bennu {
		multiplicity 1..1;
	}
	VirtualHost playsRole virtualHosts {
		multiplicity *;
	}
}

/* Authorization Groups */

class groups.PersistentGroup {
}

relation PersistentGroups {
	VirtualHost playsRole host {
		multiplicity 0..1;
	}
	groups.PersistentGroup playsRole groups {
		multiplicity *;
	}
}

class groups.NobodyGroup extends groups.PersistentGroup {
}

class groups.AnyoneGroup extends groups.PersistentGroup {
}

class groups.AnonymousGroup extends groups.PersistentGroup {
}

class groups.LoggedGroup extends groups.PersistentGroup {
}

class groups.UserGroup extends groups.PersistentGroup {
}

relation UserGroupMembers {
	groups.UserGroup playsRole {
		multiplicity *;
	}
	User playsRole member {
		multiplicity *;
	}
}

class groups.CompositionGroup extends groups.PersistentGroup {
}

relation PersistentGroupComposition {
	groups.PersistentGroup playsRole children {
		multiplicity 1..*;
	}
	groups.CompositionGroup playsRole {
		multiplicity *;
	}
}

class groups.UnionGroup extends groups.CompositionGroup {
}

class groups.IntersectionGroup extends groups.CompositionGroup {
}

class groups.DifferenceGroup extends groups.CompositionGroup {
}

class groups.NegationGroup extends groups.PersistentGroup {
}

relation PersistentGroupNegationGroup {
	groups.PersistentGroup playsRole negated {
		multiplicity 1..1;
	}
	groups.NegationGroup playsRole {
		multiplicity *;
	}
}

class groups.CustomGroup extends groups.PersistentGroup {
}

class groups.DynamicGroup extends groups.PersistentGroup {
	String name (REQUIRED);
	DateTime created (REQUIRED);
}

relation DynamicGroupCreator {
	groups.DynamicGroup playsRole {
		multiplicity *;
	}
	User playsRole creator {
		multiplicity 1..1;
	}
}

relation DynamicGroupWrapper {
	groups.DynamicGroup playsRole dynamicGroup {
		multiplicity *;
	}
	groups.PersistentGroup playsRole group {
		multiplicity 1..1;
	}
}

relation DynamicGroupHistoric {
	groups.DynamicGroup playsRole previous {
		multiplicity 0..1;
	}
	groups.DynamicGroup playsRole next {
		multiplicity 0..1;
	}
}

/* Password Recovery */
class PasswordRecoveryRequest {
	DateTime requested;
	String verificationHash;
	DateTime consumed;
}

relation UserPasswordRecoveryRequest {
	User playsRole user;
	PasswordRecoveryRequest playsRole passwordRecoveryRequest;
}

relation PasswordRecoveryRequestPasswordRecoveryRequest {
	PasswordRecoveryRequest playsRole previous;
	PasswordRecoveryRequest playsRole next;
}
